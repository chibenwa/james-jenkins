import java.util.List
import java.util.ArrayList
import java.util.UUID
import org.kohsuke.github.GitHub
import org.kohsuke.github.GHCommitState
import org.kohsuke.github.GHRepository

// This script must be called with
// $branch parameter: branch to build specified (used by git workflow-plugin command)
// $repoURL parameter: specifies the commiter GitHub repo URL
// $sha1 parameter: specifies the actual commit
// $version parameter: specifies the James version of the branch to build (only available when building a branch)

def hostname = 'james.linagora.com'
def maxRetries = 120
def author = extractUsername()
def authorParentURL = "https://github.com/${author}/james-project.git"
def repoName = extractRepoName()

// Not given optional parameters are set to null
def propertyMissing(String name) { null }

public String extractUsername() {
    return "${repoURL}".split('/')[3];
}

public String extractRepoName() {
    return "${repoURL}".split('/')[4].split('\\.')[0];
}

public class CommitStatuses implements Serializable {
    def commitStatuses;

    public CommitStatuses() {
        commitStatuses = new ArrayList<CommitStatus>();
    }

    public void addPendingStatus(CommitStatus status) {
        commitStatuses.add(status);
        status.pending();
    }

    public void failPendingStatuses() {
        for (CommitStatus status : commitStatuses) {
            if (status.state.equals("PENDING")) {
                status.failure();
            }
        }
    }
}

public class CommitStatusFactory implements Serializable {

    private final String repoName;
    private final String sha1;
    private int stepNumber = 0;

    public CommitStatusFactory(String repoName, String sha1) {
        this.repoName = repoName;
        this.sha1 = sha1;
    }

    public CommitStatus from(String description) {
        stepNumber++;
        return new CommitStatus(repoName, sha1, description, stepNumber);
    }
}

public class CommitStatus implements Serializable {
    def repoName;
    def sha1;
    def description;
    def context;
    def state;

    public CommitStatus(String repoName, String sha1, String description, int stepNumber) {
        this.repoName = repoName;
        this.sha1 = sha1;
        this.description = description;
        this.context = "workflow-job step " + stepNumber;
    }

    def pending() { createPendingCommitStatus(); }
    def success() { createSuccessCommitStatus(); }
    def failure() { createFailureCommitStatus(); }

    private void createPendingCommitStatus() {
        createCommitStatus("PENDING");
    }

    private void createSuccessCommitStatus() {
        createCommitStatus("SUCCESS");
    }

    private void createFailureCommitStatus() {
        createCommitStatus("FAILURE");
    }

    @NonCPS
    private GHRepository getRepository(String repoName) {
        return GitHub.connectUsingOAuth(System.getenv("GITHUB_TOKEN")).getRepository("linagora/" + repoName);
    }

    @NonCPS
    private void createCommitStatus(String state) {
        this.state = state;
        if (sha1 != null) {
            getRepository(repoName).createCommitStatus(sha1, GHCommitState.valueOf(state), null, description, context);
        }
    }
}

public class Images implements Serializable {
    def buildId;
    def jamesCompile;
    def gitPublish;

    public Images(String buildId) {
        jamesCompile = 'james-parent-compile-' + buildId;
        jamesCassandra = 'james-server-cassandra-' + buildId;
        jamesCassandraLdap = 'james-server-cassandra-ldap-' + buildId;
        jamesJPA = 'james-server-jpa-' + buildId;
        jamesJpaSample = 'james-server-jpa-sample-' + buildId;
        jamesJpaSampleForTesting = 'james-server-jpa-sample-testing' + buildId;
        jamesSpring = 'james-server-spring-' + buildId;
        gitPublish = 'git/publish-' + buildId;
    }
}

public class Containers implements Serializable {
    def keystore = 'keystore';
    def keys = 'keys';
    def integration;
    def jamesCompile;
    def jamesTest;
    def gitPublish;

    public Containers(String buildId) {
        cassandra = 'cassandra-' + buildId;
        elasticSearch = 'elasticSearch-' + buildId;
        integration = 'integration-' + buildId;
        jamesCompile = 'james-parent-compile-' + buildId;
        jamesTest = 'james-parent-test-' + buildId;
        gitPublish = 'git-publish-' + buildId;
    }
}

def jarPathCassandra = '/cassandra/destination/james-server-cassandra-guice.jar'
def libPathCassandra = '/cassandra/destination/james-server-cassandra-guice.lib'
def jarPathCassandraLdap = '/cassandra/destination/james-server-cassandra-ldap-guice.jar'
def libPathCassandraLdap = '/cassandra/destination/james-server-cassandra-ldap-guice.lib'
def cliJarPathCassandra = '/cassandra/destination/james-server-cli.jar'
def clilibPathCassandra = '/cassandra/destination/james-server-cli.lib'

def jarPathJPA = '/jpa/destination/james-server-jpa-guice.jar'
def libPathJPA = '/jpa/destination/james-server-jpa-guice.lib'
def cliJarPathJPA = '/jpa/destination/james-server-cli.jar'
def clilibPathJPA = '/jpa/destination/james-server-cli.lib'

def jamesVersion = jamesVersion()
def zipPath = "/spring/destination/james-server-app-${jamesVersion}-app.zip"
def keystorePath = '/keys/keystore'
def jamesCliWithOptions = 'java -jar /root/james-cli.jar -h 127.0.0.1'
def jamesCliWithOptionsSpring = "/root/james-server-app-${jamesVersion}/bin/james-cli.sh -h 127.0.0.1 -p 9999"
def useMavenCache = '-v maven-cache-volume:/root/.m2'

private String jamesVersion() {
    if (version == null) {
        return "3.2.0-SNAPSHOT";
    }
    return "${version}";
}

def executeCommand (command) {
    try {
        sh "${command}"
    } catch (Exception e) {
        echo "Error executing ${command} : ${e.getMessage()}"
        e.printStackTrace();
    }
}

def deleteImage = { name -> executeCommand("docker rmi --force=true ${name}") }
def deleteContainer = { name -> executeCommand("docker rm --force=true --volumes=true ${name}") }

def setDockerHost(dockerHost) {
    env.DOCKER_HOST = "tcp://${dockerHost}:2376"
    env.DOCKER_CERT_PATH = '/keys/'
    env.DOCKER_TLS_VERIFY = 'TRUE'
}

def unsetDockerHost() {
    env.DOCKER_HOST = ""
    env.DOCKER_CERT_PATH = ""
    env.DOCKER_TLS_VERIFY = 'FALSE'
}

def flows = [:]

def sha1OrBranch = {
    if (sha1 == null) {
        return "${branch}";
    }
    return sha1;
}

def isMaster = {
    return sha1OrBranch() == 'master';
}

def dockerUser = {
    return System.getenv("DOCKER_USER");
}

def dockerPassword = {
    return System.getenv("DOCKER_PASSWORD");
}

def gitlabToken = {
    return System.getenv("GITLAB_TOKEN");
}

def publishToDocker = {
    return isMaster() && dockerUser() != null;
}

def partialBuild = {
    return !isMaster();
}

def partialBuildEnvFunction = {
    if (partialBuild()) {
        def baseBranchEnv = "--env 'JAMES_PARTIAL_BUILD_BASE_BRANCH=origin/master'"
        def additionalOptions = "--env 'MVN_ADDITIONAL_ARG_LINE=-Ppartial-build'"

        return "${baseBranchEnv} ${additionalOptions}"
    } else {
        return "";
    }
}

def partialBuildEnv = partialBuildEnvFunction();

def packagageOnGitlab = {
    return isMaster() && gitlabToken() != null;
}

flows["${sha1}"] = {

    def buildId = "${branch.toLowerCase()}-${UUID.randomUUID()}"
    def mergeBranch = "MERGE-${buildId}"
    def images = new Images(buildId);
    def containers = new Containers(buildId);

    def sha1ToBuild = sha1OrBranch()
    def verbose = "-a stdout -a stderr"

    def statuses = new CommitStatuses();
    def commitStatusFactory = new CommitStatusFactory(repoName, sha1);
    def merging = commitStatusFactory.from("Merging");
    statuses.addPendingStatus(merging);

    def buildingJava8 = commitStatusFactory.from("Building java 8");
    statuses.addPendingStatus(buildingJava8);

    def testingJava8 = commitStatusFactory.from("Testing java 8");
    statuses.addPendingStatus(testingJava8);

    def dockeringGuiceCassandra = commitStatusFactory.from("Dockering Guice Cassandra");
    statuses.addPendingStatus(dockeringGuiceCassandra);
    def dockeringGuiceJPA = commitStatusFactory.from("Dockering Guice JPA");
    statuses.addPendingStatus(dockeringGuiceJPA);
    def dockeringSpringJPA = commitStatusFactory.from("Dockering Spring JPA");
    statuses.addPendingStatus(dockeringSpringJPA);
    def dockeringGuiceCassandraLdap = commitStatusFactory.from("Building Guice Cassandra/Ldap");
    statuses.addPendingStatus(dockeringGuiceCassandraLdap);
    def dockeringGuiceJPASampleTesting = commitStatusFactory.from("Dockering Guice JPA with data provision");
    statuses.addPendingStatus(dockeringGuiceJPASampleTesting);

    def deployingJames = commitStatusFactory.from("Deploying James docker conainers");
    statuses.addPendingStatus(deployingJames);

    def publishing;
    def deployAndValidatingBuilder = [:]
    if (publishToDocker()) {
        publishing = commitStatusFactory.from("Publishing");
        statuses.addPendingStatus(publishing);
    }
    def packagingTrigger;
    if (packagageOnGitlab()) {
        packagingTrigger = commitStatusFactory.from("Triggering packaging");
        statuses.addPendingStatus(packagingTrigger);
    }

    stage "Build"
    node('remote') {
        ws("/home/jenkins/build/workspace/${env.BUILD_NUMBER}") {
        try {
            //perform merge
            git url: authorParentURL, branch: branch
            sh "docker build --tag ${images.gitPublish} -f dockerfiles/merge/Dockerfile ."
            sh "docker run ${verbose} -t --name ${containers.gitPublish} -v /origin ${images.gitPublish} ${sha1ToBuild} ${mergeBranch}"
            merging.success();

            //Building with tests
            sh "docker build --tag=${images.jamesCompile} dockerfiles/compilation/java-8"

            def tmpfsOptions = '--tmpfs=/tmp:rw,exec,size=1g --tmpfs=/james-project:rw,size=4g'
            def dockerVolume = '-v /var/run/docker.sock:/var/run/docker.sock'
            def destinationVolumes = '--volume=/jpa/destination --volume=/cassandra/destination --volume=/spring/destination'
            def allVolumes = "${dockerVolume} --volumes-from=${containers.keys} ${useMavenCache} --volumes-from=${containers.gitPublish} ${destinationVolumes}"
            def compileNameDefinitions = "--name=${containers.jamesCompile}"
            def testNameDefinitions = "--name=${containers.jamesTest}"

            sh "cd dockerfiles/; docker run ${verbose} ${tmpfsOptions} ${useMavenCache} --volumes-from=${containers.gitPublish} ${compileNameDefinitions} --env 'MVN_ADDITIONAL_ARG_LINE=-T 1C' ${images.jamesCompile} -s ${mergeBranch}"
            buildingJava8.success();

            sh "cd dockerfiles/; docker run ${verbose} ${tmpfsOptions} ${allVolumes} ${testNameDefinitions} ${partialBuildEnv} ${images.jamesCompile} ${mergeBranch}"
            testingJava8.success();

            //Deploying Guice Server with Cassandra
            sh "cd dockerfiles/run/guice/cassandra; docker cp ${containers.keystore}:${keystorePath} destination/conf"
            sh "cd dockerfiles/run/guice/cassandra; docker cp ${containers.jamesTest}:${jarPathCassandra} destination"
            sh "cd dockerfiles/run/guice/cassandra; docker cp ${containers.jamesTest}:${libPathCassandra} destination"
            sh "cd dockerfiles/run/guice/cassandra; docker cp ${containers.jamesTest}:${cliJarPathCassandra} destination"
            sh "cd dockerfiles/run/guice/cassandra; docker cp ${containers.jamesTest}:${clilibPathCassandra} destination"

            sh "cd dockerfiles/run/guice/cassandra; docker build --tag=${images.jamesCassandra} ."
            dockeringGuiceCassandra.success()

            //Deploying Guice Server with JPA
            sh "cd dockerfiles/run/guice/jpa; docker cp ${containers.keystore}:${keystorePath} destination/conf"
            sh "cd dockerfiles/run/guice/jpa; docker cp ${containers.jamesTest}:${jarPathJPA} destination"
            sh "cd dockerfiles/run/guice/jpa; docker cp ${containers.jamesTest}:${libPathJPA} destination"
            sh "cd dockerfiles/run/guice/jpa; docker cp ${containers.jamesTest}:${cliJarPathJPA} destination"
            sh "cd dockerfiles/run/guice/jpa; docker cp ${containers.jamesTest}:${clilibPathJPA} destination"

            sh "cd dockerfiles/run/guice/jpa; docker build --tag=${images.jamesJPA} ."
            dockeringGuiceJPA.success()

            //Deploying James Server with Spring + JPA
            sh "cd dockerfiles/run/spring; docker cp ${containers.keystore}:${keystorePath} destination/conf"
            sh "cd dockerfiles/run/spring; docker cp ${containers.jamesTest}:${zipPath} destination"

            sh "cd dockerfiles/run/spring; docker build --tag=${images.jamesSpring} ."
            dockeringSpringJPA.success()

            //"Building Guice Server with Cassandra/Ldap
            sh "cd dockerfiles/run/guice/cassandra-ldap; docker cp ${containers.keystore}:${keystorePath} destination/conf"
            sh "cd dockerfiles/run/guice/cassandra-ldap; docker cp ${containers.jamesTest}:${jarPathCassandraLdap} destination"
            sh "cd dockerfiles/run/guice/cassandra-ldap; docker cp ${containers.jamesTest}:${libPathCassandraLdap} destination"
            sh "cd dockerfiles/run/guice/cassandra-ldap; docker cp ${containers.jamesTest}:${cliJarPathCassandra} destination"
            sh "cd dockerfiles/run/guice/cassandra-ldap; docker cp ${containers.jamesTest}:${clilibPathCassandra} destination"

            sh "cd dockerfiles/run/guice/cassandra-ldap; docker build --tag=${images.jamesCassandraLdap} ."
            dockeringGuiceCassandraLdap.success()

            //Building Guice Server with JPA then provision data
            sh "cd dockerfiles/run/guice/provisioned; cp Dockerfile NewDockerfile; sed -i -- 's,linagora/james-jpa-guice,${images.jamesJPA},g' NewDockerfile"
            sh "cd dockerfiles/run/guice/provisioned; docker build --tag=${images.jamesJpaSampleForTesting} -f NewDockerfile ."
            sh "cd dockerfiles/run/guice/provisioned; rm NewDockerfile"
            dockeringGuiceJPASampleTesting.success()

            def integrationEntryPoint = "--entrypoint=\"/root/integration_tests.sh\""
            def integrationVolume = "--volumes-from=${containers.gitPublish}"
            def integrationOptions = "${verbose} ${useMavenCache} --name=${containers.integration} ${integrationEntryPoint} ${integrationVolume}"
            def cassandraGuiceEnv = "--env 'CASSANDRA_GUICE_IMAGE=${images.jamesCassandra}'"
            def jpaGuiceEnv = "--env 'JPA_GUICE_IMAGE=${images.jamesJPA}'"
            def jpaSampleGuiceEnv = "--env 'JPA_SAMPLE_IMAGE=${images.jamesJpaSampleForTesting}'"
            def springEnv = "--env 'SPRING_IMAGE=${images.jamesSpring}'"
            def imagesEnv = "${cassandraGuiceEnv} ${jpaGuiceEnv} ${jpaSampleGuiceEnv} ${springEnv}"

            sh "docker run ${integrationOptions} ${imagesEnv} ${images.jamesCompile} ${sha1ToBuild}"
            deployingJames.success();

            if (publishToDocker()) {
                //Publishing to Docker Hub
                def dUser = dockerUser();
                def dPassword = dockerPassword();
                sh "docker login -u ${dUser} -p ${dPassword}"
                sh "docker tag ${images.jamesCassandra} linagora/james-project"
                sh "docker push linagora/james-project"

                sh "docker tag ${images.jamesSpring} linagora/james-jpa-spring"
                sh "docker push linagora/james-jpa-spring"

                sh "docker tag ${images.jamesJPA} linagora/james-jpa-guice"
                sh "docker push linagora/james-jpa-guice"

                sh "docker tag ${images.jamesCassandraLdap} linagora/james-ldap-project"
                sh "docker push linagora/james-ldap-project"

                try {
                    sh "cd dockerfiles/run/guice/provisioned; docker build --tag=${images.jamesJpaSample} ."

                    sh "docker tag ${images.jamesJpaSample} linagora/james-jpa-sample"
                    sh "docker push linagora/james-jpa-sample"
                } finally {
                    deleteImage(images.jamesJpaSample)
                }
                publishing.success();
            }

            if (packagageOnGitlab()) {
               def gToken = gitlabToken();
               sh """curl
                   |-X POST
                   |-Ftoken=${gToken}
                   |-F'ref=master'
                   |-F'variables[REPO_NAME]=oncommit'
                   |-F'variables[SOURCE_REPO]=https://github.com/linagora/james-project'
                   |https://ci.linagora.com/api/v4/projects/803/trigger/pipeline""".stripMargin()
                        packagingTrigger.success();
            }
        } finally {
            //Cleaning everything
            deleteContainer(containers.gitPublish)
            deleteContainer(containers.jamesCompile)
            deleteContainer(containers.jamesTest)
            deleteContainer(containers.integration)

            deleteImage(images.gitPublish)
            deleteImage(images.jamesCompile)

            deleteImage(images.jamesCassandra)
            deleteImage(images.jamesCassandraLdap)
            deleteImage(images.jamesJPA)
            deleteImage(images.jamesJpaSampleForTesting)
            deleteImage(images.jamesSpring)
        }
        }
    }
    statuses.failPendingStatuses();
}

parallel flows
